// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  name      String
  username  String    @unique
  email     String    @unique
  password  String
  bio       String?
  photo     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  posts      Post[]
  comments   Comment[]
  followers  Follow[] @relation("followers")
  following  Follow[] @relation("following")
  likes Like[]
}

// Post model
model Post {
  id        String    @id @default(uuid())
  content   String
  photo     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String
  comments  Comment[]
  likes Like[]
}

// Comment model
model Comment {
  id        String    @id @default(uuid())
  content   String
  createdAt DateTime  @default(now())

  // Relations
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String

  post      Post      @relation(fields: [postId], references: [id])
  postId    String
}

// Follow model
model Follow {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())

  follower   User     @relation("followers", fields: [followerId], references: [id])
  followerId String

  following  User     @relation("following", fields: [followingId], references: [id])
  followingId String

  @@unique([followerId, followingId]) // mencegah duplicate follow
}

model Like {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
  userId    String

  post      Post     @relation(fields: [postId], references: [id])
  postId    String

  @@unique([userId, postId]) // mencegah like ganda oleh user yang sama
}